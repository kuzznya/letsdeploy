openapi: 3.1.0

info:
  title: Letsdeploy API
  description: Letsdeploy API allows users to deploy simple projects to K8s
  version: 0.0.1

security:
  - jwt: []
  - oidc:
      - openid
  - apiKey: []

tags:
  - name: project
    description: Projects API
  - name: service
    description: Services API
  - name: managed_service
    description: Managed Services API

paths:
  /api/v1/projects:
    get:
      operationId: GetProjects
      tags:
        - project
      summary: Returns user projects
      description: Returns a list of projects that user has access to
      responses:
        200:
          description: A JSON array of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error'
                  - type: array
                    items:
                      $ref: '#/components/schemas/Error'
        500:
          $ref: '#/components/responses/InternalServerError'
    post:
      operationId: CreateProject
      tags:
        - project
      summary: Create new project
      requestBody:
        description: New project data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        200:
          description: Created project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectId'
    get:
      operationId: GetProject
      tags:
        - project
      summary: Get project by id
      description: Returns project if user is a participant of that project
      responses:
        200:
          description: Retrieved project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectInfo'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      operationId: DeleteProject
      tags:
        - project
      summary: Delete project
      responses:
        200:
          description: Success
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/{id}/participants:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectId'
    get:
      operationId: GetProjectParticipants
      tags:
        - project
      summary: Get project participants
      responses:
        200:
          description: List of participants
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/{id}/participants/{username}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectId'
      - name: username
        in: path
        required: true
        schema:
          type: string
          minLength: 1
    put:
      operationId: AddProjectParticipant
      tags:
        - project
      summary: Add participant to the project
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      operationId: RemoveProjectParticipant
      tags:
        - project
      summary: Remove participant from the project
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/invitations/{invite_code}:
    parameters:
      - name: invite_code
        in: path
        required: true
        schema:
          type: string
    post:
      operationId: JoinProject
      tags:
        - project
      summary: Join project by invitation code
      responses:
        200:
          description: Project the user was invited to
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          description: Project with this invite code not found
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/{id}/invitations/regenerate:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectId'
    post:
      operationId: RegenerateInviteCode
      tags:
        - project
      summary: Regenerate invite code
      responses:
        200:
          description: New invite code
          content:
            application/json:
              schema:
                type: object
                properties:
                  inviteCode:
                    type: string
                required:
                  - inviteCode
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/{id}/secrets:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectId'
    get:
      operationId: GetSecrets
      tags:
        - project
      summary: Get project secrets
      responses:
        200:
          description: List of secrets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Secret'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    post:
      operationId: CreateSecret
      tags:
        - project
      summary: Create secret
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecretValue'
      responses:
        200:
          description: Created project secret
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/{id}/secrets/{name}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectId'
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SecretName'
    get:
      operationId: GetSecretValue
      tags:
        - project
      summary: Get secret
      responses:
        200:
          description: Secret with value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretValue'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      operationId: DeleteSecret
      tags:
        - project
      summary: Delete secret
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/services:
    post:
      operationId: CreateService
      tags:
        - service
      summary: Create new service
      description: Returns created service
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        200:
          description: Created service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/services/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      operationId: GetService
      tags:
        - service
      summary: Get service
      description: Returns found service if user is a participant of a project the service belongs to
      responses:
        200:
          description: Retrieved service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    put:
      operationId: UpdateService
      tags:
        - service
      summary: Update service
      description: Returns updated service if user is a participant of a project the service belongs to
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        200:
          description: Updated service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      operationId: DeleteService
      tags:
        - service
      summary: Delete service from the project
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/services/{id}/status:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      operationId: GetServiceStatus
      tags:
        - service
      summary: Get service status
      responses:
        200:
          description: Service status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceStatus'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/services/{id}/restart:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    post:
      operationId: RestartService
      tags:
        - service
      summary: Restart service
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/managed_services:
    post:
      operationId: CreateManagedService
      tags:
        - managed_service
      summary: Create new managed service
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedService'
      responses:
        200:
          description: Created managed service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedService'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/managed_services/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      operationId: GetManagedService
      tags:
        - managed_service
      summary: Get managed service
      description: Returns managed service if user is a participant of a project the managed service belongs to
      responses:
        200:
          description: Retrieved managed service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedService'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      operationId: DeleteManagedService
      tags:
        - managed_service
      summary: Delete managed service
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/managed_services/{id}/status:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      operationId: GetManagedServiceStatus
      tags:
        - managed_service
      summary: Get managed service status
      responses:
        200:
          description: Managed service status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceStatus'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/managed_services/{id}/mongodb/users:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      operationId: GetMongoDbUsers
      tags:
        - mongodb
      summary: Get MongoDB users
      responses:
        200:
          description: Retrieved MongoDB users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MongoDbUser'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    post:
      operationId: CreateMongoDbUser
      tags:
        - mongodb
      summary: Create MongoDB user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MongoDbUser'
      responses:
        200:
          description: Created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MongoDbUser'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    put:
      operationId: UpdateMongoDbUser
      tags:
        - mongodb
      summary: Update MongoDB user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MongoDbUser'
      responses:
        200:
          description: Updated MongoDB user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MongoDbUser'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/managed_services/{id}/mongodb/users/{username}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      - name: username
        in: path
        required: true
        schema:
          type: string
          minLength: 1
    get:
      operationId: GetMongoDbUser
      tags:
        - mongodb
      summary: Get MongoDB user
      responses:
        200:
          description: Retrieved MongoDB user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MongoDbUser'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      operationId: DeleteMongoDbUser
      tags:
        - mongodb
      summary: Delete MongoDB user
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/tokens:
    post:
      operationId: CreateTempToken
      tags:
        - token
      summary: Create temporary token
      description: Create short-lived token to access WebSocket-based connections that cannot use OIDC authentication
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                required:
                  - token

  /api/v1/api_keys:
    post:
      operationId: CreateApiKey
      tags:
        - api_key
      summary: Create API key
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKey'
      responses:
        200:
          description: Created API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    get:
      operationId: GetApiKeys
      tags:
        - api_key
      summary: Get API keys
      description: Get all user API keys
      responses:
        200:
          description: API keys
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiKey'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/api_keys/{key}:
    parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
    delete:
      operationId: DeleteApiKey
      tags:
        - api_key
      summary: Delete API key
      description: Delete API key and revoke the access immediately
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
    oidc:
      type: openIdConnect
      openIdConnectUrl: https://auth.kuzznya.com/realms/letsdeploy/.well-known/openid-configuration
    apiKey:
      type: apiKey
      in: header
      name: API-Key

  schemas:
    ProjectId:
      type: string
      pattern: ^[a-z0-9][a-z0-9-]{2,18}[a-z0-9]$
      minLength: 4
      maxLength: 20

    Project:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ProjectId'
      required:
        - id

    ProjectInfo:
      description: Project information with services and managed services
      allOf:
        - $ref: '#/components/schemas/Project'
        - type: object
          properties:
            inviteCode:
              type: string
            participants:
              type: array
              items:
                type: string
            services:
              type: array
              items:
                $ref: '#/components/schemas/Service'
            managedServices:
              type: array
              items:
                $ref: '#/components/schemas/ManagedService'
          required:
            - inviteCode
            - participants
            - services
            - managedServices

    Service:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        project:
          $ref: '#/components/schemas/ProjectId'
        name:
          type: string
          pattern: ^[a-z0-9]([a-z0-9-]{0,18}[a-z0-9])?$
        image:
          type: string
          minLength: 1
        port:
          type: integer
          minimum: 1
          maximum: 65535
        envVars:
          type: array
          items:
            $ref: '#/components/schemas/EnvVar'
            default: []
        publicApiPrefix:
          type: string
          pattern: ^(\/[A-Za-z0-9-_.]*)+$
        replicas:
          type: integer
          minimum: 0
          maximum: 10
      required:
        - id
        - project
        - name
        - image
        - port
        - envVars
        - replicas

    ServiceStatus:
      type: object
      properties:
        id:
          type: integer
        status:
          type: string
          enum:
            - available
            - progressing
            - unhealthy
      required:
        - id
        - status

    ManagedService:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        project:
          $ref: '#/components/schemas/ProjectId'
        name:
          type: string
          pattern: ^[a-z0-9]([a-z0-9-]{0,18}[a-z0-9])?$
        type:
          type: string
          enum:
            - postgres
            - mysql
            - mongo
            - rabbitmq
            - redis
      required:
        - id
        - project
        - name
        - type

    MongoDbUser:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          maxLength: 255
        passwordSecret:
          $ref: '#/components/schemas/SecretName'
          writeOnly: true
        roles:
          type: array
          items:
            $ref: '#/components/schemas/MongoDbRole'
      required:
        - username
        - roles

    MongoDbRole:
      type: object
      properties:
        role:
          type: string
          enum:
            - read
            - readWrite
            - dbAdmin
        db:
          type: string
          minLength: 1
      required:
        - role
        - db

    EnvVar:
      allOf:
        - type: object
          properties:
            name:
              type: string
              pattern: ^[a-zA-Z_]+[a-zA-Z0-9_]{0,254}$
          required:
            - name
        - oneOf:
            - type: object
              properties:
                value:
                  type: string
                  minLength: 1
              required:
                - value
            - type: object
              properties:
                secret:
                  $ref: '#/components/schemas/SecretName'
              required:
                - secret

    SecretName:
      type: string
      pattern: ^[a-z0-9]([a-z0-9-]{0,253}[a-z0-9])?$
      minLength: 1
      maxLength: 255

    Secret:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/SecretName'
        managedServiceId:
          type: integer
          readOnly: true
      required:
        - name

    SecretValue:
      allOf:
        - $ref: '#/components/schemas/Secret'
        - type: object
          properties:
            value:
              type: string
          required:
            - value

    ApiKey:
      type: object
      properties:
        key:
          type: string
          readOnly: true
        name:
          type: string
      required:
        - key
        - name

    Error:
      type: object
      properties:
        error:
          type: string
      required:
        - error

  responses:
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: User is unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: User is forbidden to access this resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
